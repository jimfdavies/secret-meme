#!bash

# Specifically for BASH console (Git Bash) and Oracle VirtualBox on Windows 7+
# Refs: 
# https://raw.githubusercontent.com/boot2docker/boot2docker/master/boot2docker
# http://docs.docker.io/installation/windows/

VM_NAME=boot2docker-vm
VBOX_DIR="/c/Program Files/Oracle/VirtualBox"
VBM_EXE="vboxmanage"
VBM="$VBOX_DIR/$VBM_EXE"

BOOT2DOCKER_CFG_DIR=~/.boot2docker

VM_OSTYPE=Linux26_64
VM_MEM=1200
VM_NIC=virtio

SSH_HOST_PORT=2022
DOCKER_PORT=4243
BOOT2DOCKER_ISO=$BOOT2DOCKER_CFG_DIR/boot2docker.iso

mkdir -p "$BOOT2DOCKER_CFG_DIR"

get_latest_release_name() {
    local LRN
    LRN=$(curl 'https://api.github.com/repos/boot2docker/boot2docker/releases' 2>/dev/null|grep -e "\"tag_name\":[[:space:]]*\"[a-z0-9.]*\""|head -1|cut -d: -f2|tr -d ' "'|cut -d, -f1)
    if [ -z "$LRN" ]; then
        echo "ERROR"
    else
        echo "$LRN"
    fi
}

download_latest() {
    LATEST_RELEASE=$(get_latest_release_name)
    #https://github.com/boot2docker/boot2docker/releases/download/v0.9.1/boot2docker.iso
    #LATEST_RELEASE=v0.9.1
    #mkdir -p "${BOOT2DOCKER_ISO%/*}"
    curl -L -o "$BOOT2DOCKER_ISO" "https://github.com/boot2docker/boot2docker/releases/download/$LATEST_RELEASE/boot2docker.iso"
}

log() {
  echo "[`date +"%Y-%m-%d %H:%M:%S"`] ${*}"
}

init() {

  log "Creating VM $VM_NAME"
  "$VBM" createvm --name $VM_NAME --register
  "$VBM" modifyvm $VM_NAME \
    --ostype $VM_OSTYPE \
    --memory $VM_MEM \
    --acpi on \
    --boot1 dvd

  "$VBM" modifyvm $VM_NAME \
    --nic1 nat \
    --nictype1 $VM_NIC \
    --cableconnected1 on

  "$VBM" modifyvm $VM_NAME \
    --natpf1 "ssh,tcp,127.0.0.1,$SSH_HOST_PORT,,22" \
    --natpf1 "docker,tcp,127.0.0.1,$DOCKER_PORT,,4243"

  if [ ! -e "$BOOT2DOCKER_ISO" ]; then
    log "boot2docker.iso not found."
    download_latest
  fi

  #"$VBM" storagectl $VM_NAME --name "SATA" --remove
  "$VBM" storagectl $VM_NAME --name "SATA" --add sata --hostiocache on
  "$VBM" storageattach $VM_NAME --storagectl "SATA" --port 0 --device 0 --type dvddrive --medium "$BOOT2DOCKER_ISO"

}

start() {

  is_installed || status
  if ! is_running; then
    if is_paused; then
      log "Resuming $VM_NAME"
      "$VBM" controlvm $VM_NAME resume > /dev/null
      wait_vm
      log "Resumed."
      else
        log "Starting $VM_NAME..."
            "$VBM" startvm $VM_NAME --type headless > /dev/null &
            #wait_vm
            log "Started."
        fi
    else
        log "$VM_NAME is already running."
    fi

}

stop() {
  
  is_installed || status
  if is_running; then
    log "Shutting down $VM_NAME..."
    "$VBM" controlvm $VM_NAME acpipowerbutton > /dev/null
    while is_running; do
      sleep 1
      done
    else
      log "$VM_NAME is not running."
    fi

}

delete() {

  "$VBM" unregistervm --delete $VM_NAME 

}

do_ssh() {
    ssh -o StrictHostKeyChecking=no -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -p $SSH_HOST_PORT docker@localhost $*
}

info() {
  if is_installed; then
    "$VBM" showvminfo $VM_NAME
  else
    log "$VM_NAME does not exist."
  fi
}

is_installed() {
  "$VBM" list vms | grep "$VM_NAME" > /dev/null
}

is_running() {
    info | grep -E "State:[ ]+running" > /dev/null
}

is_paused() {
    info | grep -E "State:[ ]+paused" > /dev/null
}

is_saved() {
    info | grep -E "State:[ ]+saved" > /dev/null
}

is_suspended() {
    info | grep -E "State:[ ]+suspended" > /dev/null
}

is_stopped() {
    info | grep -E "State:[ ]+powered off" > /dev/null
}

is_aborted() {
    info | grep -E "State:[ ]+aborted" > /dev/null
}

status() {
    if is_running; then
        log "$VM_NAME is running."
        exit 0
    elif is_paused; then
        log "$VM_NAME is paused."
        exit 1
    elif is_saved; then
        log "$VM_NAME is saved."
        exit 1
    elif is_suspended; then
        log "$VM_NAME is suspended."
        exit 1
    elif is_stopped; then
        log "$VM_NAME is stopped."
        exit 1
    elif is_aborted; then
        log "$VM_NAME is aborted."
        exit 1
    else
        log "$VM_NAME does not exist."
        exit 1
    fi
}

fast () {
  clear
  init
  start
  do_ssh "$@"
}

case $1 in
    init | setup) init;;
    start | up) start;;
    stop | halt | down) stop;;
    delete) delete;;
    status) status;;
    info) info;;
    fast) fast;;
    ssh) shift; do_ssh "$@";;
    *) echo "Usage $0 {init|start|up|save|pause|stop|restart|status|info|delete|ssh|download|fast}"; exit 1
esac


# case $1 in
#     init | setup) init;;
#     start | up) start;;
#     save | pause | suspend) suspend;;
#     stop | halt | down) stop;;
#     restart) restart;;
#     status) status;;
#     info) info;;
#     delete) delete;;
#     ssh) shift; do_ssh "$@";;
#     download) download_latest;;
#     *) echo "Usage $0 {init|start|up|save|pause|stop|restart|status|info|delete|ssh|download}"; exit 1
# esac